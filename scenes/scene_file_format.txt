Scene files are broken down into descriptions of individual scene nodes comprising
of individual pieces of the scene. Any interrelations between scene nodes are
referenced by name instead of being defined recursively. For example:

{
    "light": {
        "name": "light_01"
        "shape": "shape_01"
    }

    "shape": {
        "name": "shape_01"
        "type": "triangle_mesh"
        "file": "triangle_mesh.obj"
    }
}

As can be seen above, the scene files are written and read from json files. This
project utilizes rapidjson for handling all io.

----------------------------------------
Currently supported Nodes and their uses
----------------------------------------

---------------- SCENE -----------------
"scene:" {
    "name": "scene_name"
    "integrator": "integrator_name"
    "sampler": "sampler_name"
    "camera": "camera_name"
    "medium": "global_medium_name"
}

NOTE: Only one scene node may be defined per file

name - defines the user given name for the scene as scene_name

integrator - tells the scene to use the integrator whose id is specified as
             integrator_name.
             Default value: uni_path integrator.

sampler - tells the scene to use the sampler whose id is specified as
          sampler_name
          Default value: independent sampler which takes 8 spp.

camera - tells the scene to use the camera whose id is specified as camera_name
         Default value: perspective camera with unit transform and 45 fov.

medium - tells the scene to use the atmospheric medium whose id is specified as
         global_medium_name
         Default value: none
---------------- SCENE -----------------

-------------- INTEGRATOR --------------
"integrator:" {
    "name": "integrator_name"
    "type": "integrator_type"
    "max_time": long_value
    "max_heuristic": long_value
}

name - defines the user given name for the integrator as integrator_name.
       Note: integrator_name must be the same string as the "integrator"
             argument in the scene node or else this will be ignored.

type - tells the renderer which integrator to use as integrator_type
       Default value:
           normal
       Currently supported:
           normal
           whitted

max_time - tells the renderer the maximum amount of time to spend rendering
           Default value: -1 (Note: negative means the renderer will ignore this)

max_heuristic - tells the renderer some maximum arbitrary value to terminate
                renders once reached. This is a free parameter to use for
                experiments
                Default: -1 (Note: negative means the renderer will ignore this)
-------------- INTEGRATOR --------------

--------------- SAMPLER ----------------
"sampler:" {
    "name": "sampler_name"
    "type": "sampler_type"
    "spp": int_value
    "seed": long_value
    "seed2": long_value
}

name - defines the user given name for the sampler as sampler_name.
       NOTE: sampler_name must be the same string as the "sampler" argument in
             the scene node or else this will be ignored.

type - tells the renderer which sampler implementation to use as sampler_type
       Default value:
           independent
       Currently Supported:
           independent

spp - tells the renderer how many samples per pixel to use
      Default value: 8 (NOTE: must always be non-zero)

seed - tells the renderer the seed to use for the sampler
       Default value: 0x12345678

seed2 - tells the renderer the seed to use for random permutations of stratified
        samples. (NOTE: currently not used)
        Default value: 0x968574132
--------------- SAMPLER ----------------

---------------- CAMERA ----------------
"camera:" {
    "name": "camera_name"
    "type": "camera_type"
    "origin": [
        float_value (origin.x),
        float_value (origin.y),
        float_value (origin.z)
    ]
    "target": [
        float_value (target.x),
        float_value (target.y),
        float_value (target.z)
    ]
    "up": [
        float_value (up.x),
        float_value (up.y),
        float_value (up.z)
    ]
    "lookat": [
        float_value,
        float_value,
        float_value,
        float_value,
        float_value,
        float_value,
        float_value,
        float_value,
        float_value
    ]
    "fov": float_value
    "width": int_value
    "height:" int_value
}

name - defines the user given name for the camera as camera_name
       NOTE: camera_name must be the same string as the "camera" argument in
             the scene node or else this will be ignored.

type - tells the renderer which camera implementation to use as camera_type
       Default value:
           perspective
       Currently Supported:
           perspective

origin - the origin vector of the camera

target - the target vector of the camera

up - the up vector of the camera

lookat - the full lookat matrix of the camera

fov - the field of view of the camera

width - the width of the image plane in pixels

height - the height of the image plane in pixels
---------------- CAMERA ----------------

---------------- OBJECT ----------------
"object:" {
    "name": "object_name"
    "mesh": "mesh_name"
    "material": "material_name"
    /* "media": "media_name" */ TODO: these should own the object and not vice versa
    /* "emitter": "emitter_name" */
    /* transform operations */
}

name - defines the user given name for the camera as camera_name

mesh - indicates the mesh of the object to be object_name
       default value: none

material - indicates the material of the object to be material_name
           default value: none

transform operations:
    "scale": [float_value, float_value, float_value]
    "translate:" [float_value, float_value, float_value]
    "rotate:" [float_value (degree), float_value, float_value, float_value (axis)]

transform operations are applied in the order which they appear
---------------- OBJECT ----------------

----------------- MESH -----------------
"mesh": {
    "name": "mesh_name"
    "type": "mesh_type"
    "filename": "file_path"
    /* TODO - optional parameters */
}

name - defines the user given name for the mesh as mesh_name

type - indicates the type of mesh to be created as mesh_type
       currently supported types:
           "triangle_mesh"

filename - defines the path to the geometry for the mesh or other data
----------------- MESH -----------------

---------------- EMITTER ---------------
"emitter": {
    "name": "emitter_name"
    "type": "emitter_type"
    "mesh": "mesh_name" (only valid if type==mesh)
    "material": material_name
    "pos": [
        float_value (pos.x),
        float_value (pos.y),
        float_value (pos.z)
    ]
    "intensity": [
        float_value (I.x),
        float_value (I.y),
        float_value (I.z)
    ]
    /* transform operations */
}

name - defines the user given name for the emitter as emitter_name

type - indicates the type of emitter to be created as emitter_type
       default: point
       currently supported types:
           "point"

mesh - indicates the mesh for the emitter if it is a mesh emitter

material - indicates the material of the object to be material_name
           default value: none

pos - indicates the position of the mesh before transforms are applied for certain
      emitters.
      default:
          Point3f(0.0)

intensity - The intensity of the emitter to be applied for all emitters
            default:
                Color3f(1.0) - white
---------------- EMITTER ---------------

--------------- MATERIAL ---------------
"material": {
    "name": "material_name"
    "bsdf": "bsdf_name"
}

name - defines the user given name for the material as material_name

bsdf - defines the bsdf for the material as bsdf_name
--------------- MATERIAL ---------------

----------------- BSDF -----------------
"bsdf": {
    "name": "bsdf_name"
    "type": "bsdf_type"
    "albedo": [
        float_value (albedo.r),
        float_value (albedo.g),
        float_value (albedo.b)
    ]
}

name - defines the user given name for the bsdf as bsdf_name

type - defines the type of the bsdf
       default: diffuse
       currently supported types:
           "diffuse"
----------------- BSDF -----------------

----------------- MEDIA ----------------
TODO: soon
----------------- MEDIA ----------------
